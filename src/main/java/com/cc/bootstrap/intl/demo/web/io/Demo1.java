package com.cc.bootstrap.intl.demo.web.io;

/**
 * @Description: 第2章 深入分析Java I/O的工作机制
 * @author: ChenChen
 * @date: 2023/5/15 9:24
 */
public class Demo1 {
    public static void main(String[] args) {
        /*
        Java的I/O操作类在包java.io下，大概有将近80个类，这些类大概可以分成如下4组。
        ◎ 基于字节操作的I/O接口：InputStream和OutputStream。
        ◎ 基于字符操作的I/O接口：Writer和Reader。
        ◎ 基于磁盘操作的I/O接口：File。
        ◎ 基于网络操作的I/O接口：Socket。
        前两组主要是传输数据的数据格式，后两组主要是传输数据的方式，虽然Socket类并不在java.io包下，但是我仍然把它们划分在一起，因为我个人认为I/O的核心问题要么是数据格式影响I/O操作，
        要么是传输方式影响I/O操作，也就是将什么样的数据写到什么地方的问题。I/O只是人与机器或者机器与机器交互的手段，除了它们能够完成这个交互功能外，我们关注的就是如何提高它的运行效率了，
        而数据格式和传输方式是影响效率最关键的因素。后面的分析也是基于这两个因素来展开的。

---------------------------------磁盘I/O工作机制
        （一）几种访问文件的方式
        在介绍Java读取和写入磁盘文件之前，先来看看应用程序访问文件有哪几种方式。
        我们知道，读取和写入文件I/O操作都调用操作系统提供的接口，因为磁盘设备是由操作系统管理的，应用程序要访问物理设备只能通过系统调用的方式来工作。
        读和写分别对应read（）和write（）两个系统调用。而只要是系统调用就可能存在内核空间地址和用户空间地址切换的问题，这是操作系统为了保护系统本身的运行安全，
        而将内核程序运行使用的内存空间和用户程序运行的内存空间进行隔离造成的。但是这样虽然保证了内核程序运行的安全性，
        但是也必然存在数据可能需要从内核空间向用户空间复制的问题。
        如果遇到非常耗时的操作，如磁盘I/O，数据从磁盘复制到内核空间，然后又从内核空间复制到用户空间，将会非常缓慢。这时操作系统为了加速I/O访问，在内核空间使用缓存机制，
        也就是将从磁盘读取的文件按照一定的组织方式进行缓存，如果用户程序访问的是同一段磁盘地址的空间数据，那么操作系统将从内核缓存中直接取出返回给用户程序，
        这样可以减小I/O的响应时间。

        1.标准访问文件的方式
        2.直接I/O的方式 --通常是在对数据的缓存管理由应用程序实现的数据库管理系统
        3.同步访问文件的方式
        4.异步访问文件的方式--异步访问文件的方式就是当访问数据的线程发出请求之后，线程会接着去处理其他事情，而不是阻塞等待，当请求的数据返回后继续处理下面的操作。这种访问文件的方式可以明显地提高应用程序的效率，但是不会改变访问文件的效率。
        5.内存映射的方式

        （二）Java访问磁盘文件 --一个关键问题就是数据写到何处，其中一个主要方式就是将数据持久化到物理磁盘，下面将介绍如何将数据持久化到物理磁盘。
        ，数据在磁盘中的唯一最小描述就是文件，也就是说上层应用程序只能通过文件来操作磁盘上的数据，文件也是操作系统和磁盘驱动器交互的最小单元。
        值得注意的是，在Java中通常的File并不代表一个真实存在的文件对象，
        当你指定一个路径描述符时，它就会返回一个代表这个路径的虚拟对象，这个可能是一个真实存在的文件或者是一个包含多个文件的目录。

        （三）Java序列化技术
        Java序列化就是将一个对象转化成一串二进制表示的字节数组，通过保存或转移这些字节数据来达到持久化的目的。

---------------------------------网络I/O工作机制
        数据从一台主机发送到网络中的另一台主机需要经过很多步骤。首先需要有相互沟通的意向。其次要有能够沟通的物理渠道（物理链路）：是通过电话，
        还是直接面对面交流。再次，双方见面时语言要能够交流，而且双方说话的步调要一致，明白什么时候该自己说话，什么时候该对方说话（通信协议）。
        本节将重点介绍通信协议和如何完成数据传输。

        （一）TCP状态转化
        在讨论如何进行Socket通信之前，我们先看看如何建立和关闭一个TCP连接

        （二）影响网络传输的因素
        将一份数据从一个地方正确地传输到另一个地方所需要的时间我们称之为响应时间。影响这个响应时间的因素有很多。
        网络带宽 传输距离  TCP 拥塞控制

        （三）Java Socket的工作机制
        Socket这个概念没有对应到一个具体的实体，它描述计算机之间完成相互通信的一种抽象功能。打个比方，可以把Socket比作两个城市之间的交通工具，
        有了它，就可以在城市之间来回穿梭了。交通工具有多种，每种交通工具也有相应的交通规则。Socket也一样，也有多种。大部分情况下我们使用的都是基于TCP/IP的流套接字，
        它是一种稳定的通信协议。




        */
    }
}
