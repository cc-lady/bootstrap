package com.cc.bootstrap.intl.demo.lambda;

/**
 * 设计和架构的原则
 * 本章将探索如何使用 Lambda 表达式实现 SOLID 原则，该原则是开发良好面向对象程序的 准则。
 * 使用 Lambda 表达式，还能改进一些现有的设计模式，本章也会为大家简要介绍几 个这样的例子。
 */
public class Study8 {
    public static void main(String[] args) {
        // 8.1 Lambda表达式改变了设计模式
        /**
         *设计模式是人们熟悉的另一种设计思想，它是软件架构中解决通用问题的模板。如果碰到 一个问题，并且恰好熟悉一个与之适应的模式，
         * 就能直接应用该模式来解决问题。
         * 从某种 程度上来说，设计模式将解决特定问题的最佳实践途径固定了下来。
         *
         * 本书的重点并不是讨论设计模式如何变得过时，相反，我们讨论的是如何使用 Lambda 表 达式，让现有设计模式变得更好、更简单，
         * 或者在某些情况下，有了不同的实现方式。 Java 8 引入的新语言特性是所有这些设计模式变化的推动因素。
         */
    }
}
