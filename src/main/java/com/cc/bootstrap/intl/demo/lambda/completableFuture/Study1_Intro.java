package com.cc.bootstrap.intl.demo.lambda.completableFuture;

/**
 * @Description: 组合式异步编程
 * 本章内容
 *  创建异步计算，并获取计算结果
 *  使用非阻塞操作提升吞吐量
 *  设计和实现异步API
 *  如何以异步的方式使用同步的API
 *  如何对两个或多个异步操作进行流水线和合并操作
 *  如何处理异步操作的完成状态
 * @author: ChenChen
 * @date: 2023/2/7 14:39
 */
public class Study1_Intro {
    public static void main(String[] args) {
//        最近这些年，两种趋势不断地推动我们反思我们设计软件的方式。第一种趋势和应用运行的
//        硬件平台相关，第二种趋势与应用程序的架构相关，尤其是它们之间如何交互。我们在第7章中
//        已经讨论过硬件平台的影响。我们注意到随着多核处理器的出现，提升应用程序处理速度最有效
//        的方式是编写能充分发挥多核能力的软件。你已经看到通过切分大型的任务，让每个子任务并行
//        运行，这一目标是能够实现的；你也已经了解相对直接使用线程的方式，使用分支/合并框架（在
//        Java 7中引入）和并行流（在Java 8中新引入）能以更简单、更有效的方式实现这一目标。

//        第二种趋势反映在公共API日益增长的互联网服务应用。著名的互联网大鳄们纷纷提供了自
//        己的公共API服务，比如谷歌提供了地理信息服务，Facebook提供了社交信息服务，Twitter提供
//        了新闻服务。现在，很少有网站或者网络应用会以完全隔离的方式工作。更多的时候，我们看到
//        的下一代网络应用都采用“混聚”（mash-up）的方式：它会使用来自多个来源的内容，将这些内
//        容聚合在一起，方便用户的生活。
//        比如，你可能希望为你的法国客户提供指定主题的热点报道。为实现这一功能，你需要向
//        谷歌或者Twitter的API请求所有语言中针对该主题最热门的评论，可能还需要依据你的内部算法
//        对它们的相关性进行排序。之后，你可能还需要使用谷歌的翻译服务把它们翻译成法语，甚至
//        利用谷歌地图服务定位出评论作者的位置信息，最终将所有这些信息聚集起来，呈现在你的网
//        站上。
//        当然，如果某些外部网络服务发生响应慢的情况，你希望依旧能为用户提供部分信息，比如
//        提供带问号标记的通用地图，以文本的方式显示信息，而不是呆呆地显示一片空白屏幕，直到地
//        图服务器返回结果或者超时退出。

//        要实现类似的服务，你需要与互联网上的多个Web服务通信。可是，你并不希望因为等待某
//        些服务的响应，阻塞应用程序的运行，浪费数十亿宝贵的CPU时钟周期。比如，不要因为等待
//        Facebook的数据，暂停对来自Twitter的数据处理。
//        这些场景体现了多任务程序设计的另一面。第7章中介绍的分支/合并框架以及并行流是实现
//        并行处理的宝贵工具；它们将一个操作切分为多个子操作，在多个不同的核、CPU甚至是机器上
//        并行地执行这些子操作。

//        与此相反，如果你的意图是实现并发，而非并行，或者你的主要目标是在同一个CPU上执
//        行几个松耦合的任务，充分利用CPU的核，让其足够忙碌，从而最大化程序的吞吐量，那么你
//        其实真正想做的是避免因为等待远程服务的返回，或者对数据库的查询，而阻塞线程的执行，
//        浪费宝贵的计算资源，因为这种等待的时间很可能相当长。通过本章中你会了解，Future接口，
//        尤其是它的新版实现CompletableFuture，是处理这种情况的利器。
    }
}
