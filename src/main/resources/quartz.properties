org.quartz.scheduler.instanceName = MyScheduler
org.quartz.threadPool.threadCount = 3
# jobStore存储调度信息方式：
# 1.RAMJobStore：将其所有数据保存在RAM中。这就是为什么它是闪电般快的，也是为什么这么简单的配置。缺点是当您的应用程序结束（或崩溃）时，所有调度信息都将丢失
# 2.JDBCJobStore也被恰当地命名 - 它通过JDBC将其所有数据保存在数据库中。因此，配置比RAMJobStore要复杂一点，而且也不是那么快。
#   但是，性能下降并不是很糟糕，特别是如果您在主键上构建具有索引的数据库表。在相当现代的一套具有体面的LAN（在调度程序和数据库之间）的机器上，
#   检索和更新触发triggers的时间通常将小于10毫秒。org.quartz.impl.jdbcjobstore.JobStoreTX或org.quartz.impl.jdbcjobstore.JobStoreCMT
#   配置JDBCJobStore以使用DriverDelegate
#   org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#   接下来，您需要通知JobStore您正在使用的表前缀（如上所述）。
#   使用表前缀配置JDBCJobStore
#   org.quartz.jobStore.tablePrefix = QRTZ_
#   最后，您需要设置JobStore应该使用哪个DataSource。命名的DataSource也必须在Quartz属性中定义。在这种情况下，我们指定Quartz应该使用DataSource名称“myDS”（在配置属性中的其他位置定义）。
#   使用要使用的DataSource的名称配置JDBCJobStore
#   org.quartz.jobStore.dataSource = myDS
org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore 