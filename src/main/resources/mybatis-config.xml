<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- 此文件主要建设sessionFactory -->
<configuration>
	<!-- 数据库连接 可外部配置且可动态替换，即可以在典型java属性文件中配置，也可以通过properties元素的子元素传递 -->
	<!-- <properties resource="com/cc/demo2/config.properties"> <property name="driver" 
		value="${driver}"/> <property name="url" value="${url}"/> <property name="username" 
		value="${username:dbj}"/>:指定默认值 这个默认值的特性是关闭的，需要添加指定的属性来开启 <property name="password" 
		value="${password}"/> 打开默认值特性 <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" 
		value="true"/> Enable this feature </properties> -->

	<!-- 改变mybatis的运行时行为 -->
	<settings>
		<!-- 该配置影响的所有映射器中配置的缓存的全局开关。 true | false true -->
		<setting name="cacheEnabled" value="true" />
		<!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。 -->
		<setting name="lazyLoadingEnabled" value="true" />
		<!-- 是否层级加载 true是 false否 -->
		<setting name="aggressiveLazyLoading" value="false" />
		<!--是否允许单一语句返回多结果集（需要兼容驱动）。 true | false true -->
		<setting name="multipleResultSetsEnabled" value="true" />
		<!-- 使用列标签代替列名 -->
		<setting name="useColumnLabel" value="true" />
		<!-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 
			Derby）。 true | false False -->
		<setting name="useGeneratedKeys" value="true" />
		<!-- 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 
			FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 -->
		<setting name="autoMappingBehavior" value="PARTIAL" />
		<!-- 指定发现自动映射目标未知列（或者未知属性类型）的行为。 • NONE: 不做任何反应 • WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 
			的日志等级必须设置为 WARN) • FAILING: 映射失败 (抛出 SqlSessionException) -->
		<setting name="autoMappingUnknownColumnBehavior" value="WARNING" />
		<!--配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 
			执行器将重用语句并执行批量更新。 -->
		<setting name="defaultExecutorType" value="SIMPLE" />
		<!-- 置超时时间，它决定驱动等待数据库响应的秒数。 -->
		<setting name="defaultStatementTimeout" value="25" />
		<!-- 为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。 -->
		<setting name="defaultFetchSize" value="100" />
		<!-- 允许在嵌套语句中使用分页（RowBounds）。 If allow, set the false -->
		<setting name="safeRowBoundsEnabled" value="false" />
		<!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 
			的类似映射。 -->
		<setting name="mapUnderscoreToCamelCase" value="false" />
		<!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 
			默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT， 本地会话仅用在语句执行上，对相同 SqlSession 
			的不同调用将不会共享数据。 -->
		<setting name="localCacheScope" value="SESSION" />
		<!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 
			NULL、VARCHAR 或 OTHER。 -->
		<setting name="jdbcTypeForNull" value="OTHER" />
		<!-- 指定哪个对象的方法触发一次延迟加载 -->
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
		<!-- 打印查询语句 -->
		<setting name="logImpl" value="STDOUT_LOGGING" />
	</settings>


	<!-- 定义类型别名 为xml配置sql提供便利提供便利 -->
	<!-- <typeAliases> -->
	<!-- 这样UtiOperateHistory可以用在任何使用com.cc.demo.model.UtiOperateHistory的地方 -->
	<!-- <typeAlias alias="UtiOperateHistory" type="com.cc.demo.model.UtiOperateHistory"/> -->

	<!-- 也可指定一个包名，mybatis会在包名下面搜索需要的java Bean 对于每一个bean，会使用首字母小写的非限定类名来作为它的别名，此时com.cc.demo.model.UtiOperateHistory 
		的别名是utiOperateHistory 推荐此方法 注解时可：@Alias("utiOperateHistory") public class 
		UtiOperateHistory{} -->
	<!-- <package name="com.cc.demo.model"/> -->

	<!-- <package name="com.cc.springbootDemo.schema"/> </typeAliases> -->

	<!-- 事务管理和连接池配置 -->
	<!-- <environments default="development"> <environment id="development"> 
		mybatis只有两种事务管理器：JDBC|MANAGED 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 
		模块会使用自带的管理器来覆盖前面的配置。 <transactionManager type="JDBC"> <property name="autoCommit" 
		value="false"/> </transactionManager> properties的属性可以在整个配置文件中使用来替换需要动态配置的属性值 
		通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。 
		有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）： <dataSource type="POOLED"> 
		<property name="driver" value="${driver}"/> <property name="url" value="${url}"/> 
		<property name="username" value="${username}"/> <property name="password" 
		value="${password}"/> </dataSource> </environment> </environments> -->

	<!--MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。 MyBatis 
		会加载不带 databaseId 属性和带有匹配当前数据库 databaseId 属性的所有语句。 如果同时找到带有 databaseId 和不带 
		databaseId 的相同语句，则后者会被舍弃。 为支持多厂商特性只要像下面这样在 mybatis-config.xml 文件中加入 databaseIdProvider 
		即可 -->
	<databaseIdProvider type="DB_VENDOR" />
	<!-- <databaseIdProvider type="DB_VENDOR"> <property name="SQL Server" value="sqlserver"/> 
		<property name="DB2" value="db2"/> <property name="Oracle" value="oracle" 
		/> </databaseIdProvider> -->

	<!-- mapper映射器 包含sql代码和映射定义信息，告诉mybatis去哪里找配置文件 mybatis将解析这个xml文件，为我们生成映射器 -->
	<!-- <mappers> <package name="com.cc.novel.mappper"/> <mapper resource="mappers/UserMapper.xml"/> 
		</mappers> -->
</configuration>
